// Code generated by MockGen. DO NOT EDIT.
// Source: get_entries_by_headword_error.go

// Package application_mock is a generated GoMock package.
package application_mock

import (
	reflect "reflect"

	dictionary_service "github.com/central182/odie/internal/domain/dictionary/dictionary_service"
	gomock "github.com/golang/mock/gomock"
)

// MockGetEntriesByHeadwordError is a mock of GetEntriesByHeadwordError interface.
type MockGetEntriesByHeadwordError struct {
	ctrl     *gomock.Controller
	recorder *MockGetEntriesByHeadwordErrorMockRecorder
}

// MockGetEntriesByHeadwordErrorMockRecorder is the mock recorder for MockGetEntriesByHeadwordError.
type MockGetEntriesByHeadwordErrorMockRecorder struct {
	mock *MockGetEntriesByHeadwordError
}

// NewMockGetEntriesByHeadwordError creates a new mock instance.
func NewMockGetEntriesByHeadwordError(ctrl *gomock.Controller) *MockGetEntriesByHeadwordError {
	mock := &MockGetEntriesByHeadwordError{ctrl: ctrl}
	mock.recorder = &MockGetEntriesByHeadwordErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetEntriesByHeadwordError) EXPECT() *MockGetEntriesByHeadwordErrorMockRecorder {
	return m.recorder
}

// DictionaryServiceFailure mocks base method.
func (m *MockGetEntriesByHeadwordError) DictionaryServiceFailure() dictionary_service.GetEntriesError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DictionaryServiceFailure")
	ret0, _ := ret[0].(dictionary_service.GetEntriesError)
	return ret0
}

// DictionaryServiceFailure indicates an expected call of DictionaryServiceFailure.
func (mr *MockGetEntriesByHeadwordErrorMockRecorder) DictionaryServiceFailure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DictionaryServiceFailure", reflect.TypeOf((*MockGetEntriesByHeadwordError)(nil).DictionaryServiceFailure))
}

// Error mocks base method.
func (m *MockGetEntriesByHeadwordError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockGetEntriesByHeadwordErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockGetEntriesByHeadwordError)(nil).Error))
}
