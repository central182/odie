// Code generated by MockGen. DO NOT EDIT.
// Source: get_entries_error.go

// Package dictionary_service_mock is a generated GoMock package.
package dictionary_service_mock

import (
	reflect "reflect"

	entry "github.com/central182/odie/internal/domain/dictionary/entry"
	gomock "github.com/golang/mock/gomock"
)

// MockGetEntriesError is a mock of GetEntriesError interface.
type MockGetEntriesError struct {
	ctrl     *gomock.Controller
	recorder *MockGetEntriesErrorMockRecorder
}

// MockGetEntriesErrorMockRecorder is the mock recorder for MockGetEntriesError.
type MockGetEntriesErrorMockRecorder struct {
	mock *MockGetEntriesError
}

// NewMockGetEntriesError creates a new mock instance.
func NewMockGetEntriesError(ctrl *gomock.Controller) *MockGetEntriesError {
	mock := &MockGetEntriesError{ctrl: ctrl}
	mock.recorder = &MockGetEntriesErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetEntriesError) EXPECT() *MockGetEntriesErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockGetEntriesError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockGetEntriesErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockGetEntriesError)(nil).Error))
}

// HasNilHeadword mocks base method.
func (m *MockGetEntriesError) HasNilHeadword() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNilHeadword")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNilHeadword indicates an expected call of HasNilHeadword.
func (mr *MockGetEntriesErrorMockRecorder) HasNilHeadword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNilHeadword", reflect.TypeOf((*MockGetEntriesError)(nil).HasNilHeadword))
}

// InfrastructuralFailure mocks base method.
func (m *MockGetEntriesError) InfrastructuralFailure() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructuralFailure")
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructuralFailure indicates an expected call of InfrastructuralFailure.
func (mr *MockGetEntriesErrorMockRecorder) InfrastructuralFailure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructuralFailure", reflect.TypeOf((*MockGetEntriesError)(nil).InfrastructuralFailure))
}

// NoEntryWasFound mocks base method.
func (m *MockGetEntriesError) NoEntryWasFound() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoEntryWasFound")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoEntryWasFound indicates an expected call of NoEntryWasFound.
func (mr *MockGetEntriesErrorMockRecorder) NoEntryWasFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoEntryWasFound", reflect.TypeOf((*MockGetEntriesError)(nil).NoEntryWasFound))
}

// UnmarshallingFailures mocks base method.
func (m *MockGetEntriesError) UnmarshallingFailures() []entry.NewError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshallingFailures")
	ret0, _ := ret[0].([]entry.NewError)
	return ret0
}

// UnmarshallingFailures indicates an expected call of UnmarshallingFailures.
func (mr *MockGetEntriesErrorMockRecorder) UnmarshallingFailures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshallingFailures", reflect.TypeOf((*MockGetEntriesError)(nil).UnmarshallingFailures))
}
